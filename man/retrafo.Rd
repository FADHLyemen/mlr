% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CPOAuxiliary.R
\name{retrafo}
\alias{retrafo}
\title{Get the Retransformation function from a resulting object}
\usage{
retrafo(data)
}
\arguments{
\item{data}{[\code{data.frame} | \code{\link{Task}} | \code{\link{WrappedModel}}]\cr
The result of a \code{\link{\%>>\%}} chain applied to a data set.}
}
\value{
[\code{CPORetrafo}]. The retransformation function that can be
  applied to new data.
}
\description{
When applying a CPO to a \code{data.frame} or \code{\link{Task}},
the data is not only changed, additionally a retransformation
function is created that can be applied to other data of the same
kind.

For example, when performing PCA on training data, the rotation
matrix is saved and can be used on new (prediction) data.

\dQuote{retrafo} retrieves a function that can be applied to new
data sets and \code{Task}s.

When chaining \code{\link{\%>>\%}} on a data object, the retrafo
associated with the result is also chained automatically. Beware,
however, that this just accesses the retrafu function with
\code{retrafo} internally. Therefore, if you plan to do apply
multiple transformations with certain operations in between,
make sure to reset the retrafo function by setting it to \code{NULL}.
See examples.
}
\examples{
\dontrun{
# FIXME: need to update this
traindat = subsetTask(pid.task, 1:400)
preddat = subsetTask(pid.task, 401:768)

trained = traindat \%>>\% cpoPca()
reFun = retrafo(trained)
predicted = reFun(preddat)

# chaining works
trained = traindat \%>>\% cpoPca(FALSE, FALSE) \%>>\% cpoScale()
reFun = retrafo(trained)
predicted = reFun(preddat)

# reset the retrafo when doing other steps!

trained.tmp = traindat \%>>\% cpoPca(FALSE, FALSE)
reFun1 = retrafo(trained.tmp)

imp = impute(trained.tmp)
trained.tmp = imp$task  # nonsensical example
retrafo(trained.tmp) = NULL  # NECESSARY HERE

trained = trained.tmp \%>>\% cpoScale()

reFun2 = retrafo(trained)
predicted = reFun2(getTaskData(reimpute(
  reFun1(preddat), imp$desc), target.extra = TRUE)$data)


}
}
\seealso{
Other CPO: \code{\link{CPOImputer}}, \code{\link{CPO}},
  \code{\link{NULLCPO}}, \code{\link{\%>>\%}},
  \code{\link{applyCPO}}, \code{\link{attachCPO}},
  \code{\link{chainCPO}}, \code{\link{cpoApplyFun}},
  \code{\link{cpoApply}}, \code{\link{cpoAsNumeric}},
  \code{\link{cpoCollapseFact}},
  \code{\link{cpoDropConstants}},
  \code{\link{cpoDummyEncode}},
  \code{\link{cpoFilterFeatures}},
  \code{\link{cpoFixFactors}},
  \code{\link{cpoImpactEncodeClassif}},
  \code{\link{cpoImpactEncodeRegr}},
  \code{\link{cpoImpute}},
  \code{\link{cpoMissingIndicators}},
  \code{\link{cpoModelMatrix}}, \code{\link{cpoMultiplex}},
  \code{\link{cpoPca}}, \code{\link{cpoProbEncode}},
  \code{\link{cpoQuantileBinNumerics}},
  \code{\link{cpoScaleMaxAbs}},
  \code{\link{cpoScaleRange}}, \code{\link{cpoScale}},
  \code{\link{cpoSelect}}, \code{\link{cpoSpatialSign}},
  \code{\link{getCPOAffect}}, \code{\link{getCPOId}},
  \code{\link{getCPOName}}, \code{\link{getHyperPars}},
  \code{\link{getRetrafoState}},
  \code{\link{hasTagInvert}}, \code{\link{inverter<-}},
  \code{\link{inverter}}, \code{\link{makeCPO}},
  \code{\link{makeRetrafoFromState}},
  \code{\link{retrafo<-}}, \code{\link{setCPOId}},
  \code{\link{setHyperPars}}, \code{\link{tagInvert}}
}
